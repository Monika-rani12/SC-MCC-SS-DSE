
#This shell script is written by Sangharatna Godboley
#Important Note: Before running this tool KLEEMA you require to install KLEE or any other DSE.
#In this version of KLEEMA we installed KLEE and TracerX from https://tracer-x.github.io/gettingstarted.
#After installation kindly change the path in klee.sh and mutator.sh from "/home/issta21-322/TracerX/" to your home path.  


export BENCHMARK=$1
export toolValue=$2

cp Programs/KLEE/$BENCHMARK.c .

#The below command is to run KLEE or any other DSE 
res1A=$(date +%s.%N)
let dtA=0
./klee.sh $BENCHMARK $toolValue
res2A=$(date +%s.%N)
dtA=$(echo "$res2A - $res1A" | bc)

#The below command is to run the mutator script to create the mutants
res1B=$(date +%s.%N)
let dtB=0
sort -u LinesCovered.txt > LinesCovered1.txt
sort -u skipped_predicates.txt > skipped_predicates1.txt
comm -2 -3 LinesCovered1.txt skipped_predicates1.txt > filtered_lines.txt
rm -f LinesCovered1.txt 
rm -f skipped_predicates1.txt
python mutator.py $BENCHMARK.c $BENCHMARK-RM
#python bracket_mutator.py $BENCHMARK $BENCHMARK-RM
#The below command is to run the identify the dead mutants and avoid to run them,
#this is done with the information of Lines covered, gathered from the KLEE or DSE. 
#./deadmutants.sh $BENCHMARK $toolValue
res2B=$(date +%s.%N)
dtB=$(echo "$res2B - $res1B" | bc)

res1C=$(date +%s.%N)
let dtC=0
#The below command is to run each reachable mutant with test inputs generated by KLEE or DSE
./mutator.sh $BENCHMARK $toolValue
res2C=$(date +%s.%N)
dtC=$(echo "$res2C - $res1C" | bc)


ddA=$(echo "$dtA/86400" | bc)
dt2A=$(echo "$dtA-86400*$ddA" | bc)
dhA=$(echo "$dt2A/3600" | bc)
dt3A=$(echo "$dt2A-3600*$dhA" | bc)
dmA=$(echo "$dt3A/60" | bc)
dsA=$(echo "$dt3A-60*$dmA" | bc)

ddB=$(echo "$dtB/86400" | bc)
dt2B=$(echo "$dtB-86400*$ddB" | bc)
dhB=$(echo "$dt2B/3600" | bc)
dt3B=$(echo "$dt2B-3600*$dhB" | bc)
dmB=$(echo "$dt3B/60" | bc)
dsB=$(echo "$dt3B-60*$dmB" | bc)

ddC=$(echo "$dtC/86400" | bc)
dt2C=$(echo "$dtC-86400*$ddC" | bc)
dhC=$(echo "$dt2C/3600" | bc)
dt3C=$(echo "$dt2C-3600*$dhC" | bc)
dmC=$(echo "$dt3C/60" | bc)
dsC=$(echo "$dt3C-60*$dmC" | bc)

echo "###########################################"
echo "###########################################"
echo "###########################################"
echo "###########################################"

echo "****************Time Analysis Report - Start**************************"
echo "****************Time Analysis Report - Start**************************" >> $BENCHMARK-report.txt 
echo "***Total Dynamic Symbolic Execution Time" $dtA 
printf "Total Dynamic Symbolic Execution Time: %d:%02d:%02d:%02.4f\n" $ddA $dhA $dmA $dsA 
echo "***Total Dynamic Symbolic Execution Time" $dtA >> $BENCHMARK-report.txt
printf "Total Dynamic Symbolic Execution Time: %d:%02d:%02d:%02.4f\n" $ddA $dhA $dmA $dsA >> $BENCHMARK-report.txt

echo "###########################################"
echo "###########################################"

echo "***Total Mutant Generation Time" $dtB 
printf "Total Mutant Generation Time: %d:%02d:%02d:%02.4f\n" $ddB $dhB $dmB $dsB 
echo "***Total Mutant Generation Time" $dtB >> $BENCHMARK-report.txt
printf "Total Mutant Generation Time: %d:%02d:%02d:%02.4f\n" $ddB $dhB $dmB $dsB >> $BENCHMARK-report.txt

echo "###########################################"
echo "###########################################"

echo "***Total Mutation Testing Time" $dtC 
printf "Total Mutation Testing Time: %d:%02d:%02d:%02.4f\n" $ddBC $dhC $dmC $dsC 
echo "***Total Mutation Testing Time" $dtC >> $BENCHMARK-report.txt
printf "Total Mutation Testing Time: %d:%02d:%02d:%02.4f\n" $ddC $dhC $dmC $dsC >> $BENCHMARK-report.txt

echo "****************Time Analysis Report - End**************************"
echo "****************Time Analysis Report - End**************************" >> $BENCHMARK-report.txt

echo "###########################################"
echo "###########################################"
echo "###########################################"
echo "###########################################"

#The below commands are useful to collect the important information for analysis purposes
mkdir $BENCHMARK-RESULTS-$toolValue
mv ${BENCHMARK}-KLEE-FILES $BENCHMARK-RESULTS-$toolValue
mv Mutant-compilable-check.txt $BENCHMARK-RESULTS-$toolValue
mv killed-Mutants-report.txt $BENCHMARK-RESULTS-$toolValue
mv $BENCHMARK-ReachedMutantsList.txt $BENCHMARK-RESULTS-$toolValue
mv $BENCHMARK-DeadMutantsList.txt $BENCHMARK-RESULTS-$toolValue
mv $BENCHMARK-report.txt $BENCHMARK-RESULTS-$toolValue
mv $BENCHMARK-Mutants/Types_of_faults_log.txt $BENCHMARK-RESULTS-$toolValue
#mv $BENCHMARK-Mutants $BENCHMARK-RESULTS-$toolValue
rm -r $BENCHMARK-Mutants
cp $BENCHMARK.c $BENCHMARK-RESULTS-$toolValue
mv $BENCHMARK-RM $BENCHMARK-RESULTS-$toolValue
mv Cov_report-${BENCHMARK}.txt $BENCHMARK-RESULTS-$toolValue
mv final_result-${BENCHMARK}.txt $BENCHMARK-RESULTS-$toolValue
mv skipped_predicates.txt $BENCHMARK-RESULTS-$toolValue
mv filtered_lines.txt $BENCHMARK-RESULTS-$toolValue
rm tem*.txt
rm -rf ${BENCHMARK}-Original

#rm -r *.bc
#rm -r *.i
#rm -r *.o
rm $BENCHMARK.c
rm *$BENCHMARK.*

rm Lines*.txt
rm -rf ${BENCHMARK}-1
